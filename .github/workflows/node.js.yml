name: Push the image 

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Create build
        run: npm run build

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker image remove 
        run: docker image prune -f
        
      - name: Build Docker Image
        run: docker build -t sachin816/myimage:${{ github.sha }} .

      - name: Publish image to Docker Hub
        run: docker push sachin816/myimage:${{ github.sha }}

  deploy: 
    needs: build
    runs-on: ubuntu-latest 
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull image from Docker Hub
        run: docker pull sachin816/myimage:${{ github.sha }}

      - name: Delete Old Container
        run: docker rm -f reactContainer || true

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          EC2_USER: ubuntu  
          EC2_HOST: 15.206.28.14
        run: |
          # Install SSH client
          sudo apt-get install -y openssh-client

          # Create the SSH private key file
          echo "$PRIVATE_KEY" > MonitorTool.pem
          chmod 600 MonitorTool.pem

          # Debugging: Check that the private key file is created and accessible
          cat MonitorTool.pem
          ls -l MonitorTool.pem

          # SSH into EC2 and deploy Docker container
          ssh -v -o StrictHostKeyChecking=no -i MonitorTool.pem $EC2_USER@$EC2_HOST <<EOF
            # Pull the Docker image from Docker Hub on the EC2 instance
            docker pull sachin816/myimage:${{ github.sha }}

            # Remove any existing container (if running)
            docker rm -f reactContainer || true

            # Run the Docker container with port mapping
            docker run -itd --name reactContainer -p "8030:5000" sachin816/myimage:${{ github.sha }}
          EOF
